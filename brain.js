// Array.prototype.fill polyfill:
[].fill||(Array.prototype.fill=function(a){for(var b=Object(this),c=parseInt(b.length,10),d=arguments[1],e=parseInt(d,10)||0,f=0>e?Math.max(c+e,0):Math.min(e,c),g=arguments[2],h=void 0===g?c:parseInt(g)||0,i=0>h?Math.max(c+h,0):Math.min(h,c);i>f;f++)b[f]=a;return b});

var Brain = function(atts) {

    this.predict = function(atts) {
        var i, j, k, d, l;
                
        var n_svs = [4, 24, 20];
        var svs = [[5.0999999999999996, 3.2999999999999998, 1.7, 0.5], [4.7999999999999998, 3.3999999999999999, 1.8999999999999999, 0.20000000000000001], [4.5, 2.2999999999999998, 1.3, 0.29999999999999999], [5.0999999999999996, 3.7999999999999998, 1.8999999999999999, 0.40000000000000002], [7.0, 3.2000000000000002, 4.7000000000000002, 1.3999999999999999], [6.4000000000000004, 3.2000000000000002, 4.5, 1.5], [6.9000000000000004, 3.1000000000000001, 4.9000000000000004, 1.5], [6.5, 2.7999999999999998, 4.5999999999999996, 1.5], [5.7000000000000002, 2.7999999999999998, 4.5, 1.3], [6.2999999999999998, 3.2999999999999998, 4.7000000000000002, 1.6000000000000001], [4.9000000000000004, 2.3999999999999999, 3.2999999999999998, 1.0], [6.0999999999999996, 2.8999999999999999, 4.7000000000000002, 1.3999999999999999], [5.5999999999999996, 3.0, 4.5, 1.5], [6.2000000000000002, 2.2000000000000002, 4.5, 1.5], [5.9000000000000004, 3.2000000000000002, 4.7999999999999998, 1.8], [6.2999999999999998, 2.5, 4.9000000000000004, 1.5], [6.0999999999999996, 2.7999999999999998, 4.7000000000000002, 1.2], [6.7999999999999998, 2.7999999999999998, 4.7999999999999998, 1.3999999999999999], [6.7000000000000002, 3.0, 5.0, 1.7], [6.0, 2.8999999999999999, 4.5, 1.5], [6.0, 2.7000000000000002, 5.0999999999999996, 1.6000000000000001], [5.4000000000000004, 3.0, 4.5, 1.5], [6.0, 3.3999999999999999, 4.5, 1.6000000000000001], [6.7000000000000002, 3.1000000000000001, 4.7000000000000002, 1.5], [6.2999999999999998, 2.2999999999999998, 4.4000000000000004, 1.3], [6.0999999999999996, 3.0, 4.5999999999999996, 1.3999999999999999], [5.0, 2.2999999999999998, 3.2999999999999998, 1.0], [5.0999999999999996, 2.5, 3.0, 1.1000000000000001], [5.7999999999999998, 2.7000000000000002, 5.0999999999999996, 1.8999999999999999], [4.9000000000000004, 2.5, 4.5, 1.7], [6.5, 3.2000000000000002, 5.0999999999999996, 2.0], [6.4000000000000004, 2.7000000000000002, 5.2999999999999998, 1.8999999999999999], [5.7000000000000002, 2.5, 5.0, 2.0], [6.0, 2.2000000000000002, 5.0, 1.5], [5.5999999999999996, 2.7999999999999998, 4.9000000000000004, 2.0], [6.2999999999999998, 2.7000000000000002, 4.9000000000000004, 1.8], [6.2000000000000002, 2.7999999999999998, 4.7999999999999998, 1.8], [6.0999999999999996, 3.0, 4.9000000000000004, 1.8], [7.2000000000000002, 3.0, 5.7999999999999998, 1.6000000000000001], [6.2999999999999998, 2.7999999999999998, 5.0999999999999996, 1.5], [6.0999999999999996, 2.6000000000000001, 5.5999999999999996, 1.3999999999999999], [6.4000000000000004, 3.1000000000000001, 5.5, 1.8], [6.0, 3.0, 4.7999999999999998, 1.8], [6.9000000000000004, 3.1000000000000001, 5.0999999999999996, 2.2999999999999998], [5.7999999999999998, 2.7000000000000002, 5.0999999999999996, 1.8999999999999999], [6.2999999999999998, 2.5, 5.0, 1.8999999999999999], [6.5, 3.0, 5.2000000000000002, 2.0], [5.9000000000000004, 3.0, 5.0999999999999996, 1.8]];
        var coeffs = [[100.0, 100.0, 67.36178333676105, 12.589538422225477, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -100.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -79.951321758986509, -100.0, -0.0, -100.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [22.006220839815015, 77.993779160184985, 0.0, 0.0, 7.9270039944825159, 63.180453022207928, 100.0, 100.0, 100.0, 100.0, 0.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 84.995820216015346, 100.0, 0.0, 0.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -56.103277232705778, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0]];
        var inters = [0.12472904735517538, 0.026876688003538263, -0.18214964668439662];
        var classes = [0, 1, 2];
        
        // exp(-y|x-x'|^2)
        var kernels = new Array(48),
            kernel;
        for (i = 0; i < 48; i++) {
            kernel = 0.;
            for (j = 0; j < 4; j++) {
                kernel += Math.pow(svs[i][j] - atts[j], 2);
            }
            kernels[i] = Math.exp(-0.001 * kernel);
        }
        
        var starts = new Array(3);
        for (i = 0; i < 3; i++) {
            if (i != 0) {
                var start = 0;
                for (j = 0; j < i; j++) {
                    start += n_svs[j];
                }
                starts[i] = start;
            } else {
                starts[0] = 0;
            }
        }
        var ends = new Array(3);
        for (i = 0; i < 3; i++) {
            ends[i] = n_svs[i] + starts[i];
        }
        var decisions = new Array(3);
        for (i = 0, d = 0, l = 3; i < l; i++) {
            for (j = i + 1; j < l; j++) {
                var tmp = 0.;
                for (k = starts[j]; k < ends[j]; k++) {
                    tmp += kernels[k] * coeffs[i][k];
                }
                for (k = starts[i]; k < ends[i]; k++) {
                    tmp += kernels[k] * coeffs[j - 1][k];
                }
                decisions[d] = tmp + inters[d];
                d++;
            }
        }
        var votes = new Array(3);
        for (i = 0, d = 0, l = 3; i < l; i++) {
            for (j = i + 1; j < l; j++) {
                votes[d] = decisions[d] > 0 ? i : j;
                d++;
            }
        }
        
        var amounts = new Array(3).fill(0);
        for (i = 0, l = 3; i < l; i++) {
            amounts[votes[i]] += 1;
        }
        
        var class_val = -1, class_idx = -1;
        for (i = 0, l = 3; i < l; i++) {
            if (amounts[i] > class_val) {
                class_val = amounts[i];
                class_idx = i;
            }
        }
        return classes[class_idx];
    };

};

if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {
    if (process.argv.length - 2 == 4) {
        var argv = process.argv.slice(2);
        var prediction = new Brain().predict(argv);
        console.log(prediction);
    }
    else {
        console.log("bad args");
    }
}
